DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

-- ----------------------------
-- Table structure for qrtz_job_details

-- TODO if use db postgreSQL should remove COMMENT
-- ----------------------------
CREATE TABLE qrtz_job_details (
SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
JOB_NAME VARCHAR(200) NOT NULL COMMENT "作业名称",
JOB_GROUP VARCHAR(200) NOT NULL COMMENT "作业组",
DESCRIPTION VARCHAR(250) NULL COMMENT "描述",
JOB_CLASS_NAME VARCHAR(250) NOT NULL COMMENT "作业程序集名称",
IS_DURABLE VARCHAR(1) NOT NULL COMMENT "是否持久",
IS_NONCONCURRENT VARCHAR(1) NOT NULL COMMENT "是否并行",
IS_UPDATE_DATA VARCHAR(1) NOT NULL COMMENT "是否更新",
REQUESTS_RECOVERY VARCHAR(1) NOT NULL COMMENT "是否要求唤醒",
JOB_DATA BLOB NULL,
PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB COMMENT = "自定义触发器";

-- ----------------------------
-- Table structure for qrtz_triggers
-- ----------------------------
CREATE TABLE qrtz_triggers (
SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
JOB_NAME VARCHAR(200) NOT NULL COMMENT "作业名称",
JOB_GROUP VARCHAR(200) NOT NULL COMMENT "作业组",
DESCRIPTION VARCHAR(250) NULL COMMENT "描述",
NEXT_FIRE_TIME BIGINT(13) NULL COMMENT "下次执行时间",
PREV_FIRE_TIME BIGINT(13) NULL COMMENT "前一次执行时间",
PRIORITY INTEGER NULL COMMENT "优先权",
TRIGGER_STATE VARCHAR(16) NOT NULL COMMENT "触发器状态",
TRIGGER_TYPE VARCHAR(8) NOT NULL COMMENT "触发器类型",
START_TIME BIGINT(13) NOT NULL COMMENT "开始时间",
END_TIME BIGINT(13) NULL COMMENT "结束时间",
CALENDAR_NAME VARCHAR(200) NULL COMMENT "日历名称",
MISFIRE_INSTR SMALLINT(2) NULL COMMENT "失败次数",
JOB_DATA BLOB NULL COMMENT "作业数据",
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))
ENGINE=InnoDB COMMENT = "触发器的基本信息";

-- ----------------------------
-- Table structure for qrtz_simple_triggers
-- ----------------------------
CREATE TABLE qrtz_simple_triggers (
SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
REPEAT_COUNT BIGINT(7) NOT NULL COMMENT "重复次数",
REPEAT_INTERVAL BIGINT(12) NOT NULL COMMENT "触发次数",
TIMES_TRIGGERED BIGINT(10) NOT NULL COMMENT "重复间隔",
PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))
ENGINE=InnoDB COMMENT = "存储简单的Trigger，包括重复次数，间隔，以及已触的次数";

-- ----------------------------
-- Table structure for qrtz_cron_triggers
-- ----------------------------
CREATE TABLE qrtz_cron_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
  CRON_EXPRESSION VARCHAR(120) NOT NULL COMMENT "时间表达式",
  TIME_ZONE_ID VARCHAR(80) COMMENT "时区ID",
  PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT "存储 Cron Trigger，包括Cron表达式和时区信息";

-- ----------------------------
-- Table structure for qrtz_simprop_triggers
-- ----------------------------
CREATE TABLE qrtz_simprop_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
  STR_PROP_1 VARCHAR(512) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  STR_PROP_2 VARCHAR(512) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  STR_PROP_3 VARCHAR(512) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  INT_PROP_1 INT NULL COMMENT "根据不同的trigger类型存放各自的参数",
  INT_PROP_2 INT NULL COMMENT "根据不同的trigger类型存放各自的参数",
  LONG_PROP_1 BIGINT NULL COMMENT "根据不同的trigger类型存放各自的参数",
  LONG_PROP_2 BIGINT NULL COMMENT "根据不同的trigger类型存放各自的参数",
  DEC_PROP_1 NUMERIC(13, 4) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  DEC_PROP_2 NUMERIC(13, 4) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  BOOL_PROP_1 VARCHAR(1) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  BOOL_PROP_2 VARCHAR(1) NULL COMMENT "根据不同的trigger类型存放各自的参数",
  PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT "存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器";

-- ----------------------------
-- Table structure for qrtz_blob_triggers
-- ----------------------------
CREATE TABLE qrtz_blob_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
  BLOB_DATA BLOB NULL COMMENT "保存triggers 一些信息",
  PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
  INDEX (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
  FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT "自定义触发器";

-- ----------------------------
-- Table structure for qrtz_calendars
-- ----------------------------
CREATE TABLE qrtz_calendars (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  CALENDAR_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
  CALENDAR BLOB NOT NULL,
  PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
) ENGINE = InnoDB COMMENT "以 Blob 类型存储 Quartz 的 Calendar 信息";

-- ----------------------------
-- Table structure for qrtz_paused_trigger_grps
-- ----------------------------
CREATE TABLE qrtz_paused_trigger_grps (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
  PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT "存储已暂停的 Trigger组的信息";

-- ----------------------------
-- Table structure for qrtz_fired_triggers
-- ----------------------------
CREATE TABLE qrtz_fired_triggers (
  SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
  ENTRY_ID VARCHAR(95) NOT NULL COMMENT "组标识",
  TRIGGER_NAME VARCHAR(200) NOT NULL COMMENT "触发器名称",
  TRIGGER_GROUP VARCHAR(200) NOT NULL COMMENT "触发器组",
  INSTANCE_NAME VARCHAR(200) NOT NULL COMMENT "当前实例的名称",
  FIRED_TIME BIGINT(13) NOT NULL COMMENT "当前执行时间",
  SCHED_TIME BIGINT(13) NOT NULL COMMENT "计划时间",
  PRIORITY INTEGER NOT NULL COMMENT "权重",
  STATE VARCHAR(16) NOT NULL COMMENT "状态",
  JOB_NAME VARCHAR(200) NULL COMMENT "作业名称",
  JOB_GROUP VARCHAR(200) NULL COMMENT "作业组",
  IS_NONCONCURRENT VARCHAR(1) NULL COMMENT "是否并行",
  REQUESTS_RECOVERY VARCHAR(1) NULL COMMENT "是否要求唤醒",
  PRIMARY KEY (SCHED_NAME, ENTRY_ID)
) ENGINE = InnoDB COMMENT "存储与已触发的 Trigger 相关的状态信息，以及相联 Job的执行信息";

-- ----------------------------
-- Table structure for qrtz_scheduler_state
-- ----------------------------
CREATE TABLE qrtz_scheduler_state (
SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
INSTANCE_NAME VARCHAR(200) NOT NULL COMMENT "实例名称",
LAST_CHECKIN_TIME BIGINT(13) NOT NULL COMMENT "最后的检查时间",
CHECKIN_INTERVAL BIGINT(13) NOT NULL COMMENT "检查间隔",
PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))
ENGINE=InnoDB COMMENT "存储少量的有关 Scheduler 的状态信息，和别的Scheduler实例(假如是用于一个集群中)";

-- ----------------------------
-- Table structure for qrtz_locks
-- ----------------------------
CREATE TABLE qrtz_locks (
SCHED_NAME VARCHAR(120) NOT NULL COMMENT "计划名称",
LOCK_NAME VARCHAR(40) NOT NULL COMMENT "锁名称",
PRIMARY KEY (SCHED_NAME,LOCK_NAME))
ENGINE=InnoDB COMMENT "存储程序的悲观锁的信息(假如使用了悲观锁)";

CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);