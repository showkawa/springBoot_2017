#数据库配置
spring:
  datasource:
#    url: jdbc:mysql://o186928x99.imwork.net:12921/brian?useUnicode=true&characterEncoding=utf-8&useSSL=false
#    username: root
#    password: 123456
#    type: com.alibaba.druid.pool.DruidDataSource
#    driver-class-name: com.mysql.cj.jdbc.Driver


#服务名
  application:
    name: brian-query-service
#quartz
  quartz:
    jdbc:
      # 是否初始化表结构
      initialize-schema: never
    #集群只在存储方式是jobstore才有效
    job-store-type: jdbc
    #同样名字的job在插入到表中会报错，设置为true会覆盖之前相同名字的job
    overwrite-existing-jobs: false
    properties:
      org:
        quartz:
          jobStore:
            #选择quartz的事务，其通过JobStoreTX来管理
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            #DB使用的驱动代理
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #开启集群配置
            isClustered: true
            #调整for update强制走主库
            selectWithLockSQL: SELECT /*master*/ * FROM {0}LOCKS WHERE SCHED_NAME = {1} AND LOCK_NAME = ? FOR UPDATE
            tablePrefix: QRTZ_
          plugin:
            shutdownHook:
              #调用是为了通知SchedulerPlugin它应该释放它的所有资源，该插件捕获 JVM 终止的事件（例如在 CRTL-C 上）并告诉 scheduler 关闭。
              class: org.quartz.plugins.management.ShutdownHookPlugin
              cleanShutdown: true
          scheduler:
            #根据主机以及时间戳生成实例id
            instanceId: AUTO
            #配置集群的话，必须实例名一样
            instanceName: MyClusteredScheduler
          threadPool:
            #SimpleThreadPool是Quartz.Net中自带的线程池，默认个数为10个，代表一个Scheduler同一时刻并发的最多只能执行10个job，超过10个的job需要排队等待。
            class: org.quartz.simpl.SimpleThreadPool
            # threadCount和threadPriority将以setter的形式注入ThreadPool实例
            # 并发个数  如果你只有几个工作每天触发几次 那么1个线程就可以,如果你有成千上万的工作，每分钟都有很多工作 那么久需要50-100之间.
            # 只有1到100之间的数字是非常实用的
            threadCount: 10



#指定bean所在包
mybatis:
  type-aliases-package: com.kawa.pojo
#指定映射文件
  mapper-locations: classpath:mapper/*.xml


#eureka主机名，会在控制页面中显示
eureka:
#eureka注册中心服务器地址
  client:
    serviceUrl:
      defaultZone: http://localhost:8001/eureka/
